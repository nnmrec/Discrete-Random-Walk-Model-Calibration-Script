% DRW model calibration - Matching the numerical Lagrangian time scale% coefficient from DRW model with theoretical result from G.I. Taylor% dispersion theoryclc;close all;clear all; %===========User inputs==========%Turbulent_intensity_at_inlet=0.01;  %in [-]Velocity_at_inlet=2;                %in [m/sec]CL=0.01;                            %in [-]TI=Turbulent_intensity_at_inlet;U_ave=Velocity_at_inlet;%=======End User inputs==========%%===Loading DRW Data (Extracted data from RANS Solver [ANSYS FLUENT])===%n_data_drw=10; %Number of data columnsfile='calibration_inert_withoutturbine_DRW_500try_allvelprim_TL_Le0point5_CL0point01_TI1_final.txt';fid=fopen(file,'r');[data,count]=fscanf(fid,'%f',[n_data_drw inf]);fclose(fid);X_drw_all(:,1)=data(1,:);Y_drw_all(:,1)=abs(data(2,:)-50); %Inlet center coordinate is (0,50,0)Z_drw_all(:,1)=data(3,:);v_drw_all(:,1)=data(4,:);u_prim_drw_all(:,1)=data(5,:);v_prim_drw_all(:,1)=data(6,:);w_prim_drw_all(:,1)=data(7,:);T_drw_all(:,1)=data(8,:); P_ID_all(:,1)=data(9,:)+1;  %"+1" is to start from Particle ID from 1TL_drw_all(:,1)=data(10,:);number_of_tries=max(P_ID_all);%===End of Loading DRW Data======% %===Evaluation of the mean Lagrangian time scale T_{L} modeled by DRW===%count=1;for n=1 : length(v_prim_drw_all)-1    if abs(v_prim_drw_all(n+1)-v_prim_drw_all(n))>10^-3 && TL_drw_all(n+1,1)~=0        TL(count,1)=TL_drw_all(n+1,1);        u_prim_TL(count,1)=u_prim_drw_all(n+1,1);        v_prim_TL(count,1)=v_prim_drw_all(n+1,1);        w_prim_TL(count,1)=w_prim_drw_all(n+1,1);        count=count+1;    endendI=mean(TL)%================================% %==========Sorting DRW model data for post-processing=============%%Finding the minimum number of data for each realization (stop).for m=1 : number_of_tries    [column]=find(P_ID_all==m);    stop_mat(m,1)=length(column);endstop=min(stop_mat);for m=1 : number_of_tries        % Isolating the values of ONE realization for DRW model.    index=find(P_ID_all==m);    X_drw(:,1)=X_drw_all(index);    Y_drw(:,1)=Y_drw_all(index);    Z_drw(:,1)=Z_drw_all(index);    v_drw(:,1)=v_drw_all(index);    u_prim_drw(:,1)=u_prim_drw_all(index);         v_prim_drw(:,1)=v_prim_drw_all(index);    w_prim_drw(:,1)=w_prim_drw_all(index);    T_drw(:,1)=T_drw_all(index);          %Saving the sorted positions of each realization    Xp(1:stop,m) = X_drw(1:stop,1);    Yp(1:stop,m) = Y_drw(1:stop,1);    Zp(1:stop,m) = Z_drw(1:stop,1);        %Calculating the displacement of each realization in each direction    dy(1:stop,m) = Y_drw(1:stop,1) - abs((U_ave*T_drw(1:stop,1)));    dx(1:stop,m) = X_drw(1:stop,1) - 0;    dz(1:stop,m) = Z_drw(1:stop,1) - 0;        %Saving the sorted vel. fluctuation of each realization    v_prim(1:stop,m) = v_prim_drw(1:stop,:);    u_prim(1:stop,m) = u_prim_drw(1:stop,:);    w_prim(1:stop,m) = w_prim_drw(1:stop,:);        %Saving the sorted time steps of each realization    Tp(1:stop,m) = T_drw(1:stop,:);             if m~=number_of_tries         clear X_drw Y_drw Z_drw v_drw u_prim_drw v_prim_drw w_prim_drw T_drw     end   end clear X_drw_all Y_drw_all Z_drw_all V_drw_all clear u_prim_drw_all v_prim_drw_all w_prim_drw_allclear T_drw_allfor j=1 : stop    dy_rms(j,1)=std(dy(j,:),1);    dx_rms(j,1)=std(dx(j,:),1);    dz_rms(j,1)=std(dz(j,:),1);    v_prime_rms(j,1)=std(v_prim(j,:),1);    u_prime_rms(j,1)=std(u_prim(j,:),1);    w_prime_rms(j,1)=std(w_prim(j,:),1);        Tp_ave(j,1)=mean(Tp(j,:));     end%=======End Sorting DRW model data for post-processing=============%%=======Autocorrelation function and it's integral==========%count2=1;for t=2    count1=1;        for tau=1 : stop-t            for j=1:number_of_tries                        R_num(1,j) = (w_prim(t,j)*w_prim(t+tau,j));                R_denum1(1,j)=(w_prim(t,j)^2);                   R_denum2(1,j)=(w_prim(t+tau,j)^2);                         end            R_tau(tau,1)=mean(R_num)/(sqrt(mean(R_denum1))*sqrt(mean(R_denum2)));            kesi(tau,1)=Tp_ave(t+tau)-Tp_ave(t);            clear R_num;clear R_denum;clear R_denum1;clear R_denum2;        end        I_new_all(count2,1)=trapz(R_tau)*mean(diff(Tp_ave))    I_new_limited(count2,1)=trapz(R_tau(1:50,1))*mean(diff(Tp_ave))         cmap = hsv(6);  %# Creates a 6-by-3 set of colors from the HSV colormap    figure(1)    plot(kesi,R_tau,'-','Color',cmap(1,:))    title('Velocity Autocorrelation Function','FontSize',14,'FontWeight','bold','Color','k')    xlabel('\zeta','FontSize',14,'FontWeight','bold','Color','k')    ylabel('R_{\zeta}','FontSize',14,'FontWeight','bold','Color','k')    grid on    count2=count2+1;end%==============% %===Statistical Calculation (G.I Taylor Disperssion Theory)===%LHS_v=(sqrt(2*I*Tp_ave)).*v_prime_rms;LHS_u=(sqrt(2*I*Tp_ave)).*u_prime_rms;LHS_w=(sqrt(2*I*Tp_ave)).*w_prime_rms;%All Realizations dispersion Mapfigure(2)plot(Yp,Zp,'*')title(['Realizationzs path - C_T = ',num2str(2*CL),' - TI = ',num2str(TI)])xlabel('Y [m]')ylabel('Z [m]')grid onaxis([0 200 -5 5])%Numerical (DRW) vs. Theoretical (G.I. Taylor) dispersion comparisonfigure(3)plot(Tp_ave,dy_rms,'.')hold onplot(Tp_ave,LHS_v(1:stop,1),'r.')hold ontitle(['Y Direction - C_T = ',num2str(2*CL),' - TI = ',num2str(TI)])xlabel('t [sec]')ylabel('RMS(Y)')hleg1 = legend('DRW prediction','G.I Taylor theory');set(hleg1,'Location','NorthWest')xlim([0 100])Ylim([0 1.50])grid onfigure(4)plot(Tp_ave,dx_rms,'.')hold onplot(Tp_ave,LHS_u(1:stop,1),'r.')hold ontitle(['X Direction - C_T = ',num2str(2*CL),' - TI = ',num2str(TI)])xlabel('t [sec]')ylabel('RMS(Y)')hleg1 = legend('DRW prediction','G.I Taylor theory');set(hleg1,'Location','NorthWest')xlim([0 100])Ylim([0 1.50])grid onfigure(5)plot(Tp_ave,dz_rms,'.')hold onplot(Tp_ave,LHS_w(1:stop,1),'r.')hold ontitle(['Z Direction - C_T = ',num2str(2*CL),' - TI = ',num2str(TI)])xlabel('t [sec]')ylabel('RMS(Y)')hleg1 = legend('DRW prediction','G.I Taylor theory');set(hleg1,'Location','NorthWest')xlim([0 100])Ylim([0 1.50])grid on